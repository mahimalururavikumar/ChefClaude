1. What does the .map() array method do?
ans:  The .map() method in JavaScript is used to iterate over an array and transform each element based on a callback function.
 It creates a new array without modifying the original one.


2. What do we usually use .map() for in React?
ans: n React, the .map() method is commonly used to render lists dynamically. 
Since React uses components to create UI elements,
.map() helps iterate over an array of data and return a list of components.

3. Critical thinking: why is using .map() better than just  creating the components manually by typing them out?
ans: Using .map() to generate components dynamically is better than manually creating them because it makes your React code more scalable, efficient, and maintainable. Here‚Äôs why:

1. Scalability üìà
Imagine you have 100 products to display. Manually typing each <Product /> component is impossible.
With .map(), you can generate them dynamically from an array:
{products.map((product) => (
  <Product key={product.id} name={product.name} />
))}
This approach works for any number of items, making your app scalable.
2. Code Reusability & Maintainability üõ†Ô∏è
If you manually type components and later need to update their structure, you must edit each one manually.
With .map(), you only change the template once, and all items update automatically.
Example: Instead of:

<Product name="Apple" />
<Product name="Banana" />
<Product name="Orange" />
You simply do:

{products.map((product) => (
  <Product key={product.id} name={product.name} />
))}
Now, if you want to add a price field, you only update one place.

3. Dynamic Data Handling üîÑ
Real-world apps fetch data from APIs (e.g., products, users, posts).
.map() allows React to dynamically render components from API responses.
Example:
useEffect(() => {
  fetch("https://api.example.com/products")
    .then(res => res.json())
    .then(data => setProducts(data));
}, []);
Since products is now an array from an API, using .map() ensures the UI updates automatically.
4. Performance Optimization ‚ö°
React efficiently re-renders only changed items when using .map() with unique keys.
Manually written components don‚Äôt take advantage of this optimization, leading to unnecessary re-renders and poor performance.